import {
  VDefaultsProvider
} from "./chunk-YRJJARB4.js";
import {
  makeDensityProps,
  useDensity
} from "./chunk-UWUZPP4N.js";
import {
  makeBorderProps,
  useBorder
} from "./chunk-OCHJNA5E.js";
import {
  VIcon,
  makeSizeProps,
  useSize
} from "./chunk-LUPDLWXP.js";
import {
  IconValue
} from "./chunk-LWLKJMIR.js";
import {
  makeTagProps
} from "./chunk-HRYY5TY4.js";
import {
  VImg
} from "./chunk-VBIGFDO3.js";
import {
  makeRoundedProps,
  useRounded
} from "./chunk-DWKNMHOU.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-SB4YOT23.js";
import {
  useColor
} from "./chunk-ZQKZSCDR.js";
import {
  genericComponent,
  getCurrentInstanceName,
  makeComponentProps,
  propsFactory,
  useRender
} from "./chunk-SXDCBQWL.js";
import {
  Fragment,
  createBaseVNode,
  createVNode,
  normalizeClass,
  normalizeStyle,
  toRef,
  toValue
} from "./chunk-VZXQDS5F.js";

// node_modules/vuetify/lib/composables/variant.js
var allowedVariants = ["elevated", "flat", "tonal", "outlined", "text", "plain"];
function genOverlays(isClickable, name) {
  return createBaseVNode(Fragment, null, [isClickable && createBaseVNode("span", {
    "key": "overlay",
    "class": normalizeClass(`${name}__overlay`)
  }, null), createBaseVNode("span", {
    "key": "underlay",
    "class": normalizeClass(`${name}__underlay`)
  }, null)]);
}
var makeVariantProps = propsFactory({
  color: String,
  variant: {
    type: String,
    default: "elevated",
    validator: (v) => allowedVariants.includes(v)
  }
}, "variant");
function useVariant(props) {
  let name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : getCurrentInstanceName();
  const variantClasses = toRef(() => {
    const {
      variant
    } = toValue(props);
    return `${name}--variant-${variant}`;
  });
  const {
    colorClasses,
    colorStyles
  } = useColor(() => {
    const {
      variant,
      color
    } = toValue(props);
    return {
      [["elevated", "flat"].includes(variant) ? "background" : "text"]: color
    };
  });
  return {
    colorClasses,
    colorStyles,
    variantClasses
  };
}

// node_modules/vuetify/lib/components/VAvatar/VAvatar.js
import "/Users/jiahui/Desktop/test/node_modules/vuetify/lib/components/VAvatar/VAvatar.css";
var makeVAvatarProps = propsFactory({
  start: Boolean,
  end: Boolean,
  icon: IconValue,
  image: String,
  text: String,
  ...makeBorderProps(),
  ...makeComponentProps(),
  ...makeDensityProps(),
  ...makeRoundedProps(),
  ...makeSizeProps(),
  ...makeTagProps(),
  ...makeThemeProps(),
  ...makeVariantProps({
    variant: "flat"
  })
}, "VAvatar");
var VAvatar = genericComponent()({
  name: "VAvatar",
  props: makeVAvatarProps(),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      themeClasses
    } = provideTheme(props);
    const {
      borderClasses
    } = useBorder(props);
    const {
      colorClasses,
      colorStyles,
      variantClasses
    } = useVariant(props);
    const {
      densityClasses
    } = useDensity(props);
    const {
      roundedClasses
    } = useRounded(props);
    const {
      sizeClasses,
      sizeStyles
    } = useSize(props);
    useRender(() => createVNode(props.tag, {
      "class": normalizeClass(["v-avatar", {
        "v-avatar--start": props.start,
        "v-avatar--end": props.end
      }, themeClasses.value, borderClasses.value, colorClasses.value, densityClasses.value, roundedClasses.value, sizeClasses.value, variantClasses.value, props.class]),
      "style": normalizeStyle([colorStyles.value, sizeStyles.value, props.style])
    }, {
      default: () => [!slots.default ? props.image ? createVNode(VImg, {
        "key": "image",
        "src": props.image,
        "alt": "",
        "cover": true
      }, null) : props.icon ? createVNode(VIcon, {
        "key": "icon",
        "icon": props.icon
      }, null) : props.text : createVNode(VDefaultsProvider, {
        "key": "content-defaults",
        "defaults": {
          VImg: {
            cover: true,
            src: props.image
          },
          VIcon: {
            icon: props.icon
          }
        }
      }, {
        default: () => [slots.default()]
      }), genOverlays(false, "v-avatar")]
    }));
    return {};
  }
});

export {
  genOverlays,
  makeVariantProps,
  useVariant,
  VAvatar
};
//# sourceMappingURL=chunk-V6GQAF3A.js.map
