{
  "version": 3,
  "sources": ["../../vuetify/src/components/VSlider/VSlider.tsx"],
  "sourcesContent": ["// Styles\nimport './VSlider.sass'\n\n// Components\nimport { VSliderThumb } from './VSliderThumb'\nimport { VSliderTrack } from './VSliderTrack'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VLabel } from '@/components/VLabel'\n\n// Composables\nimport { makeSliderProps, useSlider, useSteps } from './slider'\nimport { makeFocusProps, useFocus } from '@/composables/focus'\nimport { useRtl } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { VSliderThumbSlots } from './VSliderThumb'\nimport type { VSliderTrackSlots } from './VSliderTrack'\nimport type { VInputSlot, VInputSlots } from '@/components/VInput/VInput'\n\nexport type VSliderSlots = VInputSlots & VSliderThumbSlots & VSliderTrackSlots & {\n  label: VInputSlot\n}\n\nexport const makeVSliderProps = propsFactory({\n  ...makeFocusProps(),\n  ...makeSliderProps(),\n  ...makeVInputProps(),\n\n  modelValue: {\n    type: [Number, String],\n    default: 0,\n  },\n}, 'VSlider')\n\nexport const VSlider = genericComponent<VSliderSlots>()({\n  name: 'VSlider',\n\n  props: makeVSliderProps(),\n\n  emits: {\n    'update:focused': (value: boolean) => true,\n    'update:modelValue': (v: number) => true,\n    start: (value: number) => true,\n    end: (value: number) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const thumbContainerRef = ref()\n    const { rtlClasses } = useRtl()\n\n    const steps = useSteps(props)\n\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      undefined,\n      value => {\n        return steps.roundValue(value == null ? steps.min.value : value)\n      },\n    )\n\n    const {\n      min,\n      max,\n      mousePressed,\n      roundValue,\n      onSliderMousedown,\n      onSliderTouchstart,\n      trackContainerRef,\n      position,\n      hasLabels,\n      readonly,\n    } = useSlider({\n      props,\n      steps,\n      onSliderStart: () => {\n        emit('start', model.value)\n      },\n      onSliderEnd: ({ value }) => {\n        const roundedValue = roundValue(value)\n        model.value = roundedValue\n        emit('end', roundedValue)\n      },\n      onSliderMove: ({ value }) => model.value = roundValue(value),\n      getActiveThumb: () => thumbContainerRef.value?.$el,\n    })\n\n    const { isFocused, focus, blur } = useFocus(props)\n    const trackStop = computed(() => position(model.value))\n\n    useRender(() => {\n      const inputProps = VInput.filterProps(props)\n      const hasPrepend = !!(props.label || slots.label || slots.prepend)\n\n      return (\n        <VInput\n          class={[\n            'v-slider',\n            {\n              'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,\n              'v-slider--focused': isFocused.value,\n              'v-slider--pressed': mousePressed.value,\n              'v-slider--disabled': props.disabled,\n            },\n            rtlClasses.value,\n            props.class,\n          ]}\n          style={ props.style }\n          { ...inputProps }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            prepend: hasPrepend ? slotProps => (\n              <>\n                { slots.label?.(slotProps) ?? (\n                  props.label\n                    ? (\n                      <VLabel\n                        id={ slotProps.id.value }\n                        class=\"v-slider__label\"\n                        text={ props.label }\n                      />\n                    ) : undefined\n                )}\n\n                { slots.prepend?.(slotProps) }\n              </>\n            ) : undefined,\n            default: ({ id, messagesId }) => (\n              <div\n                class=\"v-slider__container\"\n                onMousedown={ !readonly.value ? onSliderMousedown : undefined }\n                onTouchstartPassive={ !readonly.value ? onSliderTouchstart : undefined }\n              >\n                <input\n                  id={ id.value }\n                  name={ props.name || id.value }\n                  disabled={ !!props.disabled }\n                  readonly={ !!props.readonly }\n                  tabindex=\"-1\"\n                  value={ model.value }\n                />\n\n                <VSliderTrack\n                  ref={ trackContainerRef }\n                  start={ 0 }\n                  stop={ trackStop.value }\n                >\n                  {{ 'tick-label': slots['tick-label'] }}\n                </VSliderTrack>\n\n                <VSliderThumb\n                  ref={ thumbContainerRef }\n                  aria-describedby={ messagesId.value }\n                  focused={ isFocused.value }\n                  min={ min.value }\n                  max={ max.value }\n                  modelValue={ model.value }\n                  onUpdate:modelValue={ v => (model.value = v) }\n                  position={ trackStop.value }\n                  elevation={ props.elevation }\n                  onFocus={ focus }\n                  onBlur={ blur }\n                  ripple={ props.ripple }\n                  name={ props.name }\n                >\n                  {{ 'thumb-label': slots['thumb-label'] }}\n                </VSliderThumb>\n              </div>\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSlider = InstanceType<typeof VSlider>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA;AA2BO,IAAMA,mBAAmBC,aAAa;EAC3C,GAAGC,eAAe;EAClB,GAAGC,gBAAgB;EACnB,GAAGC,gBAAgB;EAEnBC,YAAY;IACVC,MAAM,CAACC,QAAQC,MAAM;IACrBC,SAAS;EACX;AACF,GAAG,SAAS;AAEL,IAAMC,UAAUC,iBAA+B,EAAE;EACtDC,MAAM;EAENC,OAAOb,iBAAiB;EAExBc,OAAO;IACL,kBAAmBC,WAAmB;IACtC,qBAAsBC,OAAc;IACpCC,OAAQF,WAAkB;IAC1BG,KAAMH,WAAkB;EAC1B;EAEAI,MAAON,OAAKO,MAAmB;AAAA,QAAjB;MAAEC;MAAOC;IAAK,IAACF;AAC3B,UAAMG,oBAAoBC,IAAI;AAC9B,UAAM;MAAEC;IAAW,IAAIC,OAAO;AAE9B,UAAMC,QAAQC,SAASf,KAAK;AAE5B,UAAMgB,QAAQC,gBACZjB,OACA,cACAkB,QACAhB,WAAS;AACP,aAAOY,MAAMK,WAAWjB,SAAS,OAAOY,MAAMM,IAAIlB,QAAQA,KAAK;IACjE,CACF;AAEA,UAAM;MACJkB;MACAC;MACAC;MACAH;MACAI;MACAC;MACAC;MACAC;MACAC;MACAC;IACF,IAAIC,UAAU;MACZ7B;MACAc;MACAgB,eAAeA,MAAM;AACnBrB,aAAK,SAASO,MAAMd,KAAK;MAC3B;MACA6B,aAAaC,WAAe;AAAA,YAAd;UAAE9B;QAAM,IAAC8B;AACrB,cAAMC,eAAed,WAAWjB,KAAK;AACrCc,cAAMd,QAAQ+B;AACdxB,aAAK,OAAOwB,YAAY;MAC1B;MACAC,cAAcC,WAAA;AAAA,YAAC;UAAEjC;QAAM,IAACiC;AAAA,eAAKnB,MAAMd,QAAQiB,WAAWjB,KAAK;MAAC;MAC5DkC,gBAAgBA,MAAA;;AAAM1B,uCAAkBR,UAAlBQ,mBAAyB2B;;IACjD,CAAC;AAED,UAAM;MAAEC;MAAWC;MAAOC;IAAK,IAAIC,SAASzC,KAAK;AACjD,UAAM0C,YAAYC,SAAS,MAAMjB,SAASV,MAAMd,KAAK,CAAC;AAEtD0C,cAAU,MAAM;AACd,YAAMC,aAAaC,OAAOC,YAAY/C,KAAK;AAC3C,YAAMgD,aAAa,CAAC,EAAEhD,MAAMiD,SAASzC,MAAMyC,SAASzC,MAAM0C;AAE1D,aAAAC,YAAAL,QAAAM,WAAA;QAAA,SAEW,CACL,YACA;UACE,wBAAwB,CAAC,CAAC5C,MAAM,YAAY,KAAKmB,UAAUzB;UAC3D,qBAAqBoC,UAAUpC;UAC/B,qBAAqBoB,aAAapB;UAClC,sBAAsBF,MAAMqD;QAC9B,GACAzC,WAAWV,OACXF,MAAMsD,KAAK;QACZ,SACOtD,MAAMuD;MAAK,GACdV,YAAU;QAAA,WACLP,UAAUpC;MAAK,CAAA,GAAA;QAGvB,GAAGM;QACH0C,SAASF,aAAaQ,eAAS;;AAAAC,iCAAAC,UAAA,MAAA,GAEzBlD,WAAMyC,UAANzC,+BAAcgD,gBACdxD,MAAMiD,QAAKE,YAAAQ,QAAA;YAAA,MAGAH,UAAUI,GAAG1D;YAAK,SAAA;YAAA,QAEhBF,MAAMiD;UAAK,GAAA,IAAA,IAElB/B,UAGNV,WAAM0C,YAAN1C,+BAAgBgD,UAAU,CAAA;YAE5BtC;QACJtB,SAASiE,WAAA;AAAA,cAAC;YAAED;YAAIE;UAAW,IAACD;AAAA,iBAAAJ,gBAAA,OAAA;YAAA,SAAA;YAAA,eAGV,CAAC7B,SAAS1B,QAAQqB,oBAAoBL;YAAS,uBACvC,CAACU,SAAS1B,QAAQsB,qBAAqBN;UAAS,GAAA,CAAAuC,gBAAA,SAAA;YAAA,MAG/DG,GAAG1D;YAAK,QACNF,MAAMD,QAAQ6D,GAAG1D;YAAK,YAClB,CAAC,CAACF,MAAMqD;YAAQ,YAChB,CAAC,CAACrD,MAAM4B;YAAQ,YAAA;YAAA,SAEnBZ,MAAMd;UAAK,GAAA,IAAA,GAAAiD,YAAAY,cAAA;YAAA,OAIbtC;YAAiB,SACf;YAAC,QACFiB,UAAUxC;UAAK,GAAA;YAEnB,cAAcM,MAAM,YAAY;UAAC,CAAA,GAAA2C,YAAAa,cAAA;YAAA,OAI9BtD;YAAiB,oBACJoD,WAAW5D;YAAK,WACzBoC,UAAUpC;YAAK,OACnBkB,IAAIlB;YAAK,OACTmB,IAAInB;YAAK,cACFc,MAAMd;YAAK,uBACFC,OAAMa,MAAMd,QAAQC;YAAE,YACjCuC,UAAUxC;YAAK,aACdF,MAAMiE;YAAS,WACjB1B;YAAK,UACNC;YAAI,UACJxC,MAAMkE;YAAM,QACdlE,MAAMD;UAAI,GAAA;YAEd,eAAeS,MAAM,aAAa;UAAC,CAAA,CAAA,CAAA;QAAA;MAG3C,CAAA;IAIT,CAAC;AAED,WAAO,CAAC;EACV;AACF,CAAC;",
  "names": ["makeVSliderProps", "propsFactory", "makeFocusProps", "makeSliderProps", "makeVInputProps", "modelValue", "type", "Number", "String", "default", "VSlider", "genericComponent", "name", "props", "emits", "value", "v", "start", "end", "setup", "_ref", "slots", "emit", "thumbContainerRef", "ref", "rtlClasses", "useRtl", "steps", "useSteps", "model", "useProxiedModel", "undefined", "roundValue", "min", "max", "mousePressed", "onSliderMousedown", "onSliderTouchstart", "trackContainerRef", "position", "hasLabels", "readonly", "useSlider", "onSliderStart", "onSliderEnd", "_ref2", "roundedValue", "onSliderMove", "_ref3", "getActiveThumb", "$el", "isFocused", "focus", "blur", "useFocus", "trackStop", "computed", "useRender", "inputProps", "VInput", "filterProps", "hasPrepend", "label", "prepend", "_createVNode", "_mergeProps", "disabled", "class", "style", "slotProps", "_createElementVNode", "_Fragment", "VLabel", "id", "_ref4", "messagesId", "VSliderTrack", "VSliderThumb", "elevation", "ripple"]
}
